# Board.py
from Tile import TileVisual
from Group import Group
from random import randrange


class Board:
    def __init__(self, h, w, m):
        self.height = h
        self.width = w
        self.mines = m
        self.tileList = []
        self.checkedList = []
        self.flagging = False
        self.__createTiles()

    def getHeight(self):
        return self.height

    def getWidth(self):
        return self.width

    def isFlagging(self):
        return self.flagging

    def toggleFlagging(self):
        """
        Toggles the flagging state
        :param x: bool
        :return: None
        """
        self.flagging = not self.flagging

    def getTile(self, x, y):
        """
        Formatting Note: Formatting of the tiles is done so that the top left tile is (1, 1) and the tile directly
        adjacent to the right is (2, 1). It using the same coordinates as a graphics window would.

        :param x: int -> x-coordinate
        :param y: int -> y-coordinate
        :return: self.tileList: Object -> Tile
        """
        return self.tileList[y][x]

    def __createTiles(self):
        """
        Creates an array inside of an array that works like a coordinate plan when looking for the different tiles

        Note: If you want to reference a tile in the coordinate plane it will be list[y][x]
        :return: None
        """
        for y in range(self.height):
            rowList = []
            for x in range(self.width):
                tile = TileVisual()
                rowList.append(tile)
            self.tileList.append(rowList)
        # Calls the method createMines to add mines to the needed amount of tiles
        self.__createMines(self.mines)

    def __createMines(self, m):
        """
        Randomly places mines throughout the tiles
        :param m: int -> Amount of mines
        :return: None
        """
        counter = 0
        while counter < m:
            randomTile = self.tileList[randrange(0, self.height)][randrange(0, self.height)]
            if not(randomTile.hasMine()):
                randomTile.setMine(True)
                counter += 1

    def getList(self):
        """
        Returns the tile list
        :return: self.tileList: List -> Contains all of the tile objects in a grid form
        """
        return self.tileList

    def setList(self, x):
        """
        Sets the tileList to a new modified list (x)
        :param x: list -> New tile list
        :return: None
        """
        self.tileList = x

    def tileClicked(self, board, x, y):
        """
         Gets the coordinates of a clicked tile and then calls the group class to find out what the int inside should be
        :param x: int -> Coordinate
        :param y: int -> Coordinate
        :param board: object -> Variable that board class is assigned to
        :return: centerInt: int -> Number that is shown to indicate the number of mines surrounding the tile
        """
        if self.flagging:
            self.tileFlagged(x, y)
        else:
            tile = self.getTile(x, y)
            if tile.isFlagged():
                pass
            else:
                centerInt = Group(board, x, y)
                tile.setSurrounding(centerInt.getMines())
                tile.setState(True)
                tile.update()
                print(centerInt.getMines())
                print(x, y)
                print(centerInt.getSurroundings())
                #if centerInt.getMines() == 0:
                #    print('Called')
                #    self.__cascade(board, x, y)
                print('Nothing')
                return centerInt

    def tileFlagged(self, x, y):
        """
        Sets a tile to the flagged state
        :param x: int -> Coordinate
        :param y: int -> Coordinate
        :return: None
        """
        tile = self.getTile(x, y)
        if tile.isFlagged():
            tile.setFlag(False)
            tile.update()
        else:
            tile.setFlag(True)
            tile.update()

    def __cascade(self, board, x, y):
        """
        Gets called by the tileClicked() method if the center integer is = 0. Cascade loops finding the tiles around it
        that are also = 0, so that way you don't have to manual click a bunch of mines that are confirmed to have no
        mines
        :param board: obj -> Variable that board class is assigned to
        :param x: int -> Coordinate
        :param y: int -> Coordinate
        :return: None
        """
        group = Group(board, x, y)
        print('Attempted1')
        print(group.getSurroundings().values())
        for value in group.getGroup():
            print('Attempted2')
            print(group.getSurroundings())
            print(value)
            if value.getMines() == 0 and not([x, y] in self.checkedList):
                tile = self.getTile(x, y)
                tile.setState(True)
                print(self.checkedList)
                while True:
                    for i in range(4):
                        coordSurroundings = group.getCoordSurroundings(i)
                        x = int(coordSurroundings[0])
                        y = int(coordSurroundings[1])
                        print(coordSurroundings)
                        print('Attempted3')
                        tile = self.getTile(x, y)
                        print('Done')
                        self.checkedList.append([x, y])
                        tile.setState(True)
                        self.__cascade(board, x, y)
                        tile.update()

                        # group classes checks for tiles that don't exist


# Use dotKeys to get the coordinates above, below, side to side, to get the correct tiles checked

