# Group.py
from Board import *


class Group:
    def __init__(self, board, x, y):
        '''
        Initiates an instance of the group class based on a given location in the board list
        :param x: Int
        :param y: Int
        '''
        self.xposition = x
        self.yposition = y
        self.centerTile = board.getTile(x, y)
        self.board = board

        self.mines = 0
        self.surroundings = {}

        self.surroundings = self.findSurroundings()
        self.mines = self.findMines()

    def setMines(self, x):
        '''
        Sets the number of surrounding mines to the given variable
        :param x: INT
        :return: None
        '''
        self.mines = x

    def getMines(self):
        '''
        Accessor for the mine values
        :return: Int
        '''
        return self.mines

    def setSurroundings(self, x):
        '''
        Sets the surroundings dictionary
        :param x: Dict
        :return: None
        '''
        self.surroundings = x

    def appendSurroundings(self, x):
        '''
        Adds a new dictionary value to the end of the surroundings dictionary
        :param x: Dict
        :return: None
        '''
        self.surroundings.update(x)

    def getSurroundings(self):
        '''
        Accessor for the surroundings dictionary
        :return: Dict
        '''
        return self.surroundings

    def findSurroundings(self):
        '''
        Determines a dictionary of surrounding mine boolean values
        :return: Dict
        '''

        y = 1
        if self.yposition + y <= self.board.getHeight():
            self.appendSurroundings({str(self.xposition)+","+str(y + self.yposition): self.board.getTile(self.xposition, y + self.yposition).hasMine()})

        y -= 2

        if self.yposition + y >= 1:
            self.appendSurroundings({str(self.xposition)+","+str(y + self.yposition): self.board.getTile(self.xposition, y + self.yposition).hasMine()})

        x = 1
        if self.xposition + x <= self.board.getWidth():
            self.appendSurroundings({str(self.xposition + x)+","+str(self.yposition): self.board.getTile(self.xposition + x, self.yposition).hasMine()})
            
        x -= 2
        
        if self.xposition + x <= self.board.getWidth():
            self.appendSurroundings({str(self.xposition + x)+","+str(self.yposition): self.board.getTile(self.xposition + x, self.yposition).hasMine()})

        return self.surroundings

    def findMines(self):
        '''
        Determines the number of mines around the chosen tile
        :return: Int
        '''

        for key in self.surroundings:
            if self.surroundings[key] == True:
                self.mines += 1

    def getCoordSurroundings(self, x):
        return self.surroundings.keys[x + 1].split(',')
